import { useNavigation } from '@react-navigation/native';
import axios from 'axios';
import React, { useState } from 'react';
import { TouchableOpacity, Image, StyleSheet, Dimensions, View, Text, TextInput, ScrollView, Alert } from 'react-native';
import { Feather } from '@expo/vector-icons';

const { width: screenWidth } = Dimensions.get('window'); // Get device screen width

export default function Login() {
  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [emailVerify, setEmailVerify] = useState(false);
  const [password, setPassword] = useState('');
  const [passwordVerify, setPasswordVerify] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const handleEmail = (e) => {
    const emailVar = e.nativeEvent.text;
    setEmail(emailVar);
    setEmailVerify(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(emailVar));
  };

  const handlePassword = (e) => {
    const passwordVar = e.nativeEvent.text;
    setPassword(passwordVar);
    setPasswordVerify(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,20}$/.test(passwordVar));
  };

  const handleSubmit = async () => {
    if (emailVerify && passwordVerify) {
      const userData = { email, password };
      try {
        const res = await axios.post('http://localhost:5001/user/login', userData, {
          headers: { 'Content-Type': 'application/json' },
        });
        Alert.alert("Login Successful", res.data.message);
        navigation.navigate('Register');
      } catch (error) {
        console.error("Login Error:", error.toJSON());
        Alert.alert("Login Error", error.response?.data?.message || "Unable to login. Please try again.");
      }
    } else {
      Alert.alert("Invalid Input", "Please enter a valid email and password.");
    }
  };
  return (
    <ScrollView showsVerticalScrollIndicator={false} style={{ backgroundColor: 'white' }}>
      <View>
        <Image source={require('../assets/LoginPage.png')} style={styles.image} />
        <View style={styles.loginHeading}>
          <Text style={styles.loginText}>Login</Text>
        </View>
        <View>
          <View>
            <Text style={styles.label}>Email</Text>
            <TextInput
              placeholder="Enter your email"
              style={styles.input}
              keyboardType="email-address"
              onChange={handleEmail}
            />
            {email && (
              emailVerify ? (
                <Feather name='check-circle' color='green' size={20}  style={{marginLeft:310,marginTop:-42}}/>
              ) : (
                <Feather name="x-circle" color='red' size={20}   style={{marginLeft:310,marginTop:-42}}/>
              )
            )}
          </View>
          {!emailVerify && email && (
            <Text style={styles.errorText}>Enter a valid email address.</Text>
          )}

          <View>
            <Text style={styles.label}>Password</Text>
            <TextInput
              placeholder="Enter your password"
              style={styles.input}
              secureTextEntry={!showPassword}
              onChange={handlePassword}
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
              <Feather
                name={showPassword ? "eye" : "eye-off"}
                style={{ marginRight: -10 }}
                color={passwordVerify ? 'green' : 'red'}
                size={23}
              />
            </TouchableOpacity>
          </View>
          {!passwordVerify && password && (
            <Text style={[styles.errorText, { color: 'red' }]}>
              Password must be 8-20 characters, with uppercase, lowercase, number, and special character.
            </Text>
          )}

          <View>
            <Text style={styles.forgot}>Forgot Password</Text>
          </View>

          <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.button} onPress={handleSubmit}>
              <Text style={styles.buttonText}>Login</Text>
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.registerContainer}>
          <Text style={styles.registerText}>
            Don't have an account?{' '}
            <Text style={styles.registerLink} onPress={() => navigation.navigate('Register')}>
              Register
            </Text>
          </Text>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  image: {
    width: screenWidth,
    height: screenWidth,
    resizeMode: 'contain',
  },
  loginHeading: {
    alignSelf: 'center',
    marginVertical: 15,
  },
  loginText: {
    fontSize: 30,
    fontWeight: 'bold',
  },
  label: {
    fontSize: 16,
    width: '90%',
    alignSelf: 'center',
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  input: {
    height: 45,
    width: '90%',
    alignSelf: 'center',
    paddingHorizontal: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    backgroundColor: '#f9f9f9',
    fontSize: 16,
    color: '#333',
    marginBottom: 10,
  },
  buttonContainer: {
    alignSelf: 'flex-end',
    marginTop: 10,
    marginRight: 25,
    marginBottom: 10,
  },
  button: {
    backgroundColor: 'blue',
    paddingVertical: 12,
    paddingHorizontal: 40,
    borderRadius: 8,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  forgot: {
    marginLeft: 25,
    fontWeight: 'bold',
  },
  registerContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 20,
    marginBottom: 15,
  },
  registerText: {
    fontSize: 16,
    color: '#333',
  },
  registerLink: {
    fontWeight: 'bold',
    color: 'blue',
  },
  errorText: {
    color: 'red',
    alignSelf: 'center',
    marginBottom: 5,
  },
});



//******* App.js After Implement Stack And Drawer
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View } from 'react-native';
import Login from './authPage/Login';
import { NavigationContainer, useNavigation } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import Register from './authPage/Register';
import HomeScreen from './screens/HomeScreen';
import ProfileScreen from './screens/ProfileScreen';
import { createDrawerNavigator } from '@react-navigation/drawer';


const StackNav =()=>{
  const Stack = createNativeStackNavigator();
  return (
    <Stack.Navigator
    initialRouteName='Profile'
    >
      <Stack.Screen name='Home' component={HomeScreen}/>
      <Stack.Screen name='Profile' component={ProfileScreen}/>

    </Stack.Navigator>
  )
}

export default function App() {
 const Drawer = createDrawerNavigator();
 const navigation = useNavigation();
  return (
  <NavigationContainer>
    <Drawer.Navigator>
      <Drawer.Screen name='Home' component={HomeScreen}
   options={({ navigation }) => ({
    headerRight: () => (
      <Text onPress={() => navigation.navigate('Profile')}>Profile Icon</Text>
    ),
  })}
      
      />
      <Drawer.Screen name='Profile' component={ProfileScreen}/>
    </Drawer.Navigator>
   
    {/* <Stack.Navigator>
    <Stack.Screen name='Login' component={Login}
      options={{
        headerShown:false
      }}
      />
    <Stack.Screen name='Register' component={Register}
      options={{
        headerShown:false
      }}
      />
     
    </Stack.Navigator> */}
  </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});




//////////////********* Update Code or App.js
import { StatusBar } from "expo-status-bar";
import { StyleSheet, Text, View } from "react-native";
import Login from "./authPage/Login";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import Register from "./authPage/Register";
import HomeScreen from "./screens/HomeScreen";
import ProfileScreen from "./screens/ProfileScreen";
import { createDrawerNavigator } from "@react-navigation/drawer";
// import DrawerContent from './DrawerContent';
import DrawerContent from "./DrawerContent";

const Stack = createNativeStackNavigator();
const Drawer = createDrawerNavigator();

// Stack Navigator containing Home and Profile screens
const StackNav = () => {
  return (
    <Stack.Navigator
      initialRouteName="Home"
      screenOptions={{
        headerShown: false,
      }}
    >
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Profile" component={ProfileScreen} />
    </Stack.Navigator>
  );
};

const DrawerNav=()=>{
  return(
    <Drawer.Navigator>
      <Drawer.Screen name="Home" component={StackNav}/>
    </Drawer.Navigator>
  )
}

export default function App() {
  return (
    <NavigationContainer>
      <Drawer.Navigator drawerContent={(props) => <DrawerContent {...props} />}>
        {/* Home Stack which contains Home and Profile */}
        <Drawer.Screen name="Home" component={StackNav} />

        {/* Profile Screen directly accessible from Drawer */}
        <Drawer.Screen name="Profile" component={ProfileScreen} />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
});




///////***************

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#72BF78',
    padding: 20,
  },
  headerText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 20,
  },
  iconContainer: {
    backgroundColor: 'white',
    borderRadius: 40,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 20,
  },
  otpContainer: {
    marginTop: 20,
    width: '80%',
    alignItems: 'center',
  },
  shield: {
    color: 'green',
  },
  label: {
    color: 'white',
    fontSize: 18,
    fontWeight: '500',
    marginBottom: 10,
  },
  otpInputContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
  },
  otpInput: {
    height: 50,
    width: 40,
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    color: 'white',
    fontSize: 18,
    textAlign: 'center',
  },
});

export default PhonePage;

///////////////**************************************
import React, { useState, useRef, useEffect } from 'react';
import { TouchableOpacity, View, Text, StyleSheet, TextInput } from 'react-native';
import Shield from 'react-native-vector-icons/Entypo';
import Feather from 'react-native-vector-icons/Feather';
import { CgSpinner } from 'react-icons/cg';
import PhoneInput from 'react-phone-input-2';
import 'react-phone-input-2/lib/style.css';
// import { auth } from '../authentication/PhoneFirebase';
// import {auth} from '../authentication/PhoneFirbase';
// import { auth } from '../authentication/PhoneFirebase';
import {auth} from '../authentication/PhoneFirbase';
import { RecaptchaVerifier, signInWithPhoneNumber } from 'firebase/auth';
import toast, { Toaster } from 'react-hot-toast';

const PhonePage = () => {
  const [otp, setOtp] = useState(['', '', '', '', '', '']);
  const inputs = useRef([]);
  const [loading, setLoading] = useState(false);
  const [ph, setPh] = useState("");
  const [showOTP, setShowOTP] = useState(false);

  // useEffect(() => {
  //   // Initialize RecaptchaVerifier only once
  //   if (!window.recaptchaVerifier) {
  //     window.recaptchaVerifier = new RecaptchaVerifier(
  //       'recaptcha-container', 
  //       {
  //         size: 'invisible',
  //         callback: (response) => {
  //           onSignup();
  //         },
  //         'expired-callback': () => {
  //           toast.error('reCAPTCHA expired. Please try again.');
  //         }
  //       }, 
  //       auth
  //     );
  //   }
  // }, []);


  useEffect(() => {
    // Initialize RecaptchaVerifier if not already initialized
    if (!window.recaptchaVerifier) {
      try {
        window.recaptchaVerifier = new RecaptchaVerifier(
          'recaptcha-container',
          {
            size: 'invisible',
            callback: (response) => {
              onSignup();
            },
            'expired-callback': () => {
              toast.error('reCAPTCHA expired. Please try again.');
            }
          },
          auth  // Ensure auth is correctly passed here
        );
      } catch (error) {
        console.error("RecaptchaVerifier initialization error: ", error);
      }
    }
  }, []);


  useEffect(() => {
    return () => {
      if (window.recaptchaVerifier) {
        window.recaptchaVerifier = null;
      }
    };
  }, []);
  
  

  const onSignup = async () => {
    setLoading(true);
    const formattedPh = '+' + ph;

    try {
      const appVerifier = window.recaptchaVerifier;
      const confirmationResult = await signInWithPhoneNumber(auth, formattedPh, appVerifier);
      window.confirmationResult = confirmationResult;
      setLoading(false);
      setShowOTP(true);
      toast.success('OTP sent successfully');
    } catch (error) {
      console.error("Error sending OTP: ", error);
      setLoading(false);
      toast.error('Failed to send OTP');
    }
  };

  const handleOtpChange = (text, index) => {
    let newOtp = [...otp];
    newOtp[index] = text;
    setOtp(newOtp);

    if (text && index < inputs.current.length - 1) {
      inputs.current[index + 1].focus();
    } else if (!text && index > 0) {
      inputs.current[index - 1].focus();
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.headerText}>Login With Mobile Number</Text>
      <Toaster toastOptions={{ duration: 4000 }} />

      <View id="recaptcha-container" />

      {showOTP ? (
        <>
          <View style={styles.iconContainer}>
            <Shield name="shield" size={40} color="green" style={styles.shield} />
          </View>
          <View style={styles.otpContainer}>
            <Text style={styles.label}>Enter your OTP</Text>
            <View style={styles.otpInputContainer}>
              {otp.map((value, index) => (
                <TextInput
                  key={index}
                  ref={(input) => (inputs.current[index] = input)}
                  style={styles.otpInput}
                  keyboardType="numeric"
                  maxLength={1}
                  value={value}
                  onChangeText={(text) => handleOtpChange(text, index)}
                />
              ))}
            </View>
            <TouchableOpacity style={{ marginTop: 20, flexDirection: 'row', backgroundColor: 'green', width: '100%', padding: 15, gap: 15 }}>
              {loading && <CgSpinner size={24} color="white" />}
              <Text style={{ color: 'white', fontWeight: 'bold', fontSize: 15, borderRadius: '10%' }}>Verify OTP</Text>
            </TouchableOpacity>
          </View>
        </>
      ) : (
        <>
          <View style={styles.iconContainer}>
            <Feather name="phone" size={40} color="green" style={styles.shield} />
          </View>
          <View style={styles.otpContainer}>
            <Text style={styles.label}>Verify Your Phone Number</Text>
            <View style={styles.otpInputContainer}>
              <PhoneInput country={"in"} value={ph} onChange={setPh} />
            </View>
            <TouchableOpacity
              onPress={onSignup}
              style={{ marginTop: 20, flexDirection: 'row', width: '100%', padding: 15, gap: 15, backgroundColor: 'green' }}
            >
              {loading && <CgSpinner size={24} color="white" />}
              <Text style={{ color: 'white', fontWeight: 'bold', fontSize: 15, borderRadius: '10%' }}>Send OTP via SMS</Text>
            </TouchableOpacity>
          </View>
        </>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#72BF78',
    padding: 20,
  },
  headerText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 20,
  },
  iconContainer: {
    backgroundColor: 'white',
    borderRadius: 40,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 20,
  },
  otpContainer: {
    marginTop: 20,
    width: '80%',
    alignItems: 'center',
  },
  shield: {
    color: 'green',
  },
  label: {
    color: 'white',
    fontSize: 18,
    fontWeight: '500',
    marginBottom: 10,
  },
  otpInputContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
  },
  otpInput: {
    height: 50,
    width: 40,
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    color: 'white',
    fontSize: 18,
    textAlign: 'center',
  },
});


export default PhonePage;


//*************************
import React, { useState, useRef } from 'react';
import { TouchableOpacity, View, Text, StyleSheet, TextInput } from 'react-native';
import Shield from 'react-native-vector-icons/Entypo';
import Feather from 'react-native-vector-icons/Feather';
import { CgSpinner } from 'react-icons/cg';
import PhoneInput from 'react-phone-input-2';
import 'react-phone-input-2/lib/style.css';
import { auth } from '../authentication/PhoneFirbase'; // Ensure this is the correct path
import { signInWithPhoneNumber } from 'firebase/auth';
import toast, { Toaster } from 'react-hot-toast';

const PhonePage = () => {
  const [otp, setOtp] = useState(['', '', '', '', '', '']);
  const inputs = useRef([]);
  const [loading, setLoading] = useState(false);
  const [ph, setPh] = useState("");
  const [showOTP, setShowOTP] = useState(false);
  const [confirmationResult, setConfirmationResult] = useState(null);

  const onSignup = async () => {
    setLoading(true);
    const formattedPh = '+' + ph;

    try {
      const result = await signInWithPhoneNumber(auth, formattedPh);
      setConfirmationResult(result);
      setLoading(false);
      setShowOTP(true);
      toast.success('OTP sent successfully');
    } catch (error) {
      console.error("Error sending OTP: ", error);
      setLoading(false);
      toast.error('Failed to send OTP');
    }
  };

  const handleOtpChange = (text, index) => {
    let newOtp = [...otp];
    newOtp[index] = text;
    setOtp(newOtp);

    if (text && index < inputs.current.length - 1) {
      inputs.current[index + 1].focus();
    } else if (!text && index > 0) {
      inputs.current[index - 1].focus();
    }
  };

  const verifyOtp = async () => {
    const enteredOtp = otp.join('');
    try {
      await confirmationResult.confirm(enteredOtp);
      toast.success('OTP verified successfully');
      // Proceed to the next step or navigate to the next screen
    } catch (error) {
      console.error("Error verifying OTP: ", error);
      toast.error('Failed to verify OTP');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.headerText}>Login With Mobile Number</Text>
      <Toaster toastOptions={{ duration: 4000 }} />

      {showOTP ? (
        <>
          <View style={styles.iconContainer}>
            <Shield name="shield" size={40} color="green" style={styles.shield} />
          </View>
          <View style={styles.otpContainer}>
            <Text style={styles.label}>Enter your OTP</Text>
            <View style={styles.otpInputContainer}>
              {otp.map((value, index) => (
                <TextInput
                  key={index}
                  ref={(input) => (inputs.current[index] = input)}
                  style={styles.otpInput}
                  keyboardType="numeric"
                  maxLength={1}
                  value={value}
                  onChangeText={(text) => handleOtpChange(text, index)}
                />
              ))}
            </View>
            <TouchableOpacity
              onPress={verifyOtp}
              style={{ marginTop: 20, flexDirection: 'row', backgroundColor: 'green', width: '100%', padding: 15, gap: 15 }}
            >
              {loading && <CgSpinner size={24} color="white" />}
              <Text style={{ color: 'white', fontWeight: 'bold', fontSize: 15 }}>Verify OTP</Text>
            </TouchableOpacity>
          </View>
        </>
      ) : (
        <>
          <View style={styles.iconContainer}>
            <Feather name="phone" size={40} color="green" style={styles.shield} />
          </View>
          <View style={styles.otpContainer}>
            <Text style={styles.label}>Verify Your Phone Number</Text>
            <View style={styles.otpInputContainer}>
              <PhoneInput country={"in"} value={ph} onChange={setPh} />
            </View>
            <TouchableOpacity
              onPress={onSignup}
              style={{ marginTop: 20, flexDirection: 'row', width: '100%', padding: 15, gap: 15, backgroundColor: 'green' }}
            >
              {loading && <CgSpinner size={24} color="white" />}
              <Text style={{ color: 'white', fontWeight: 'bold', fontSize: 15 }}>Send OTP via SMS</Text>
            </TouchableOpacity>
          </View>
        </>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#72BF78',
    padding: 20,
  },
  headerText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 20,
  },
  iconContainer: {
    backgroundColor: 'white',
    borderRadius: 40,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 20,
  },
  otpContainer: {
    marginTop: 20,
    width: '80%',
    alignItems: 'center',
  },
  shield: {
    color: 'green',
  },
  label: {
    color: 'white',
    fontSize: 18,
    fontWeight: '500',
    marginBottom: 10,
  },
  otpInputContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
  },
  otpInput: {
    height: 50,
    width: 40,
    borderWidth: 2,
    borderColor: 'white',
    borderRadius: 10,
    color: 'white',
    fontSize: 18,
    textAlign: 'center',
  },
});

export default PhonePage;



//************** Update Phone Login Code With Image 
import React from "react";
import { TouchableOpacity, ImageBackground, Dimensions } from "react-native"; // Import Dimensions
import { View, Text, StyleSheet, TextInput } from "react-native"; // Use TextInput from react-native

const { width: screenWidth, height: screenHeight } = Dimensions.get('window'); // Get screen dimensions

const PhonePage = () => {
  return (
    <ImageBackground 
      source={require('../assets/PhoneNumberLoginAuth.jpg')} 
      style={styles.backgroundImage} 
      resizeMode="cover" // Ensure the image covers the entire background
    >
      <View style={styles.mainContainer}>
        <Text style={styles.heading}>Login With Number</Text>
        <View style={styles.inputContainer}>
          <TextInput
            placeholder="Enter Number"
            style={styles.input}
            keyboardType="phone-pad" // This ensures the keyboard is appropriate for phone numbers
            maxLength={15} // Optional: Limit the length of the input
          />
        </View>

        <View style={styles.buttonContainer}>
          <TouchableOpacity>
            <Text style={styles.button}>Send OTP</Text>
          </TouchableOpacity>
        </View>
      </View>
    </ImageBackground>
  );
};

export default PhonePage;

const styles = StyleSheet.create({
  backgroundImage: {
    flex: 1, // Make sure the background takes the full space
    justifyContent: "center",
    alignItems: "center",
    width: screenWidth, // Set the width to the screen width
    height: screenHeight, // Set the height to the screen height
  },
  mainContainer: {
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(255, 255, 255, 0.8)", // Add a slight white background for contrast
    borderRadius: 10, // Optional: add some border radius for better aesthetics
    padding: 20, // Optional: add padding inside the container
  },
  heading: {
    fontSize: 30,
    borderBottomWidth: 1, // Set the width of the bottom border
    borderBottomColor: 'gray', // Set the color of the bottom border
    paddingBottom: 10, // Optional: add some padding below the text for better spacing
  },
  inputContainer: {
    marginTop: 20,
    width: '80%', // Optional: control the width of the input container
  },
  input: {
    borderWidth: 1,
    borderColor: 'gray', // Define the border color for the input field
    paddingVertical: 10, // Use paddingVertical for top and bottom padding
    paddingLeft: 10, // Adjust padding left for better spacing
    borderRadius: 5, // Optional: rounded corners for the input field
  },
  buttonContainer: {
    marginTop: 20,
  },
  button: {
    backgroundColor: 'blue',
    color: '#fff',
    paddingHorizontal: 25,
    paddingVertical: 15,
    borderRadius: 5,
    fontSize: 15,
    fontWeight: '700',
  },
});


///***************** COMPLETE LOGIN CODE ***************** START 
import { useNavigation } from '@react-navigation/native';
import axios from 'axios';
import React, { useState } from 'react';
import { TouchableOpacity, Image, StyleSheet, Dimensions, View, Text, TextInput, ScrollView, Alert } from 'react-native';
import { Feather } from '@expo/vector-icons';
import Phone from 'react-native-vector-icons/AntDesign';

const { width: screenWidth } = Dimensions.get('window');

export default function Login() {
  const navigation = useNavigation();
  const [email, setEmail] = useState('');
  const [emailVerify, setEmailVerify] = useState(false);
  const [password, setPassword] = useState('');
  const [passwordVerify, setPasswordVerify] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const handleEmail = (emailText) => {
    setEmail(emailText);
    setEmailVerify(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(emailText));
  };

  const handlePassword = (passwordText) => {
    setPassword(passwordText);
    setPasswordVerify(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,20}$/.test(passwordText));
  };

  const handleSubmit = async () => {
    if (emailVerify && passwordVerify) {
      const userData = { email, password };
      try {
        const res = await axios.post('http://localhost:5001/user/login', userData, {  // Replace with your local IP
          headers: { 'Content-Type': 'application/json' },
        });
        Alert.alert("Login Successful", res.data.message);
        navigation.navigate('Register');
      } catch (error) {
        console.error("Login Error:", error.toJSON());
        Alert.alert("Login Error", error.response?.data?.message || "Unable to login. Please try again.");
      }
    } else {
      Alert.alert("Invalid Input", "Please enter a valid email and password.");
    }
  };

  return (
    <ScrollView showsVerticalScrollIndicator={false} style={{ backgroundColor: 'white' }}>
      <View>
        <Image source={require('../assets/LoginPage.png')} style={styles.image} />
        <View style={styles.loginHeading}>
          <Text style={styles.loginText}>Login</Text>
        </View>
        <View>
          <Text style={styles.label}>Email</Text>
          <View style={styles.inputContainer}>
            <TextInput
              placeholder="Enter your email"
              style={styles.input}
              value={email}
              onChangeText={handleEmail}
              keyboardType="email-address"
              autoCapitalize="none"
            />
            {email.length > 0 && (
              <Feather
                name={emailVerify ? "check-circle" : "x-circle"}
                color={emailVerify ? "green" : "red"}
                size={20}
                style={styles.icon}
              />
            )}
          </View>
          {!emailVerify && email.length > 0 && (
            <Text style={styles.errorText}>Enter a valid email address.</Text>
          )}

          <Text style={styles.label}>Password</Text>
          <View style={styles.inputContainer}>
            <TextInput
              placeholder="Enter your password"
              style={styles.input}
              secureTextEntry={!showPassword}
              value={password}
              onChangeText={handlePassword}
              autoCapitalize="none"
            />
            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
              {password.length > 0 && (
                <Feather
                  name={showPassword ? "eye" : "eye-off"}
                  color={passwordVerify ? "green" : "red"}
                  size={20}
                  style={styles.icon}
                />
              )}
            </TouchableOpacity>
          </View>
          {!passwordVerify && password.length > 0 && (
            <Text style={styles.errorText}>
              Password must be 8-20 characters, with uppercase, lowercase, number, and special character.
            </Text>
          )}

          <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.button} onPress={handleSubmit}>
              <Text style={styles.buttonText}>Login</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.phone}>
            <TouchableOpacity style={styles.phoneButton} onPress={() => navigation.navigate('Phone')}>
              <Phone
                name="phone"
                size={24}
                style={styles.phoneIcon}
              />
              <Text style={styles.phoneText}>Phone</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.registerContainer}>
            <Text style={styles.registerText}>
              Don't have an account?{' '}
              <Text style={styles.registerLink} onPress={() => navigation.navigate('Register')}>
                Register
              </Text>
            </Text>
          </View>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  image: {
    width: screenWidth,
    height: screenWidth,
    resizeMode: 'contain',
  },
  loginHeading: {
    alignSelf: 'center',
    marginVertical: 15,
  },
  loginText: {
    fontSize: 30,
    fontWeight: 'bold',
  },
  label: {
    fontSize: 16,
    width: '90%',
    alignSelf: 'center',
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '90%',
    alignSelf: 'center',
  },
  input: {
    height: 45,
    width: '100%',
    paddingHorizontal: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    backgroundColor: '#f9f9f9',
    fontSize: 16,
    color: '#333',
    marginBottom: 10,
  },
  icon: {
    position: 'absolute',
    right: 10,
    marginTop: -15,
  },
  buttonContainer: {
    alignSelf: 'center',
    marginTop: 10,
  },
  button: {
    backgroundColor: 'blue',
    paddingVertical: 12,
    paddingHorizontal: 40,
    borderRadius: 8,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  registerContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 20,
  },
  registerText: {
    fontSize: 16,
    color: '#333',
  },
  registerLink: {
    fontWeight: 'bold',
    color: 'blue',
  },
  errorText: {
    color: 'red',
    alignSelf: 'center',
    marginBottom: 5,
  },
  phone: {
    marginTop: 15,
    // alignItems: 'center',
    width:'90%',
    alignSelf:'center'
  },
  phoneButton: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    backgroundColor: '#4CAF50',
    borderRadius: 8,
    justifyContent: 'center',
  },
  phoneIcon: {
    color: 'white',
    marginRight: 8,
  },
  phoneText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});


/////////////// LOGIN CODE END *************************************  





****************** ////////////// Phoen Page ka code 
import React from "react";
import { TouchableOpacity } from "react-native";
import { View, Text, StyleSheet, TextInput } from "react-native"; // Use TextInput from react-native, not react-native-web

const PhonePage = () => {
  return (
    <View style={styles.mainContainer}>
      <Text style={styles.heading}>Login With Number</Text>
      <View style={styles.inputContainer}>
        <TextInput
          placeholder="Enter Number"
          style={styles.input}
          keyboardType="phone-pad" // This ensures the keyboard is appropriate for phone numbers
          maxLength={15} // Optional: Limit the length of the input
        />
      </View>

      <View style={styles.buttonContainer}>
        <TouchableOpacity>
          <Text style={styles.button}>Send OTP</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default PhonePage;

const styles = StyleSheet.create({
  mainContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#fff",
  },
  heading: {
    fontSize: 30,
    borderBottomWidth: 1,  // Set the width of the bottom border
    borderBottomColor: 'gray',  // Set the color of the bottom border
    paddingBottom: 10,  // Optional: add some padding below the text for better spacing
  },
  inputContainer: {
    marginTop: 20,
    width: '80%', // Optional: control the width of the input container
  },
  input: {
    borderWidth: 1,
    borderColor: 'gray', // Define the border color for the input field
    paddingVertical: 10, // Use paddingVertical for top and bottom padding
    paddingLeft: 10, // Adjust padding left for better spacing
    borderRadius: 5, // Optional: rounded corners for the input field
  },
  buttonContainer:{
    marginTop:20
  },
  button:{
    backgroundColor:'blue',
    color:'#fff',
    paddingHorizontal:25,
    paddingVertical:15,
    borderRadius:5,
    fontSize:15,
    fontWeight:'700'
  }
});


